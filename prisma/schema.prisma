// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  address        String?
  street         String?
  city           String?
  state          String?
  country        String?
  mobileNo       String?
  role           Role      @default(User)
  accounts       Account[]
  sessions       Session[]
  order          Order[]
}

enum Role {
  Admin
  User
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String       @id @default(cuid())
  name         String
  image        String?
  manufacturer String?
  description  String?
  fileUrl      String?
  price        Float?
  quantity     Int?         @default(1)
  type         ProductTypes
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt
  CartItem     CartItem[]
}

enum ProductTypes {
  Goods
  Services
  Courses
}

model Cart {
  userEmail String     @id @unique
  cartItems CartItem[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  id        String    @id @default(cuid())
  quantity  Int
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Cart      Cart?     @relation(fields: [cartId], references: [userEmail])
  cartId    String?
}

model OrderItem {
  id           String       @id @default(cuid())
  quantity     Int          @default(1)
  productId    String
  productImg   String?
  productTitle String
  productType  ProductTypes
  pdfUrl       String?
  price        Float
  status       OrderStatus  @default(Pending)
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt
  Order        Order?       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String?
}

model Order {
  id         String      @id @default(cuid())
  userEmail  String
  name       String
  email      String
  user       User        @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  orderItems OrderItem[]
  status     OrderStatus @default(Pending)
  street     String
  city       String
  state      String
  country    String
  mobileNo   String
  address    String
  total      Float
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
}

enum OrderStatus {
  Pending
  Transit
  Delivered
}
